package InventoryManager;

import com.google.gson.Gson;
import com.googlecode.objectify.annotation.Cache;
import com.googlecode.objectify.annotation.Entity;
import com.googlecode.objectify.annotation.Id;
import com.googlecode.objectify.annotation.Index;

import static com.googlecode.objectify.ObjectifyService.ofy;

/**
 * Created by code on 7/18/17.
 */
@Entity
@Cache
public class InventoryItem extends Inventory {
    @Id Long id;
    @Index String sku;
    @Index String upc;
    String name;
    String mfr;
    String color;
    String size;
    String desc;
    String location;
    String bin;
    int quantityOnHand;
    //TODO: Add potential functionality for outstanding orders and multi-store or multi-warehouse cases
    double purchasePrice;
    double salePrice;
    double msrp;

    /**
     * Required No-Arg Constructor due to constraints of Objectify
     */
    public InventoryItem() {}

    /**
     * Full constructor consisting of all the values but the ID, which is generated by Google Datastore.
     * @param sku
     * @param upc
     * @param name
     * @param mfr
     * @param color
     * @param size
     * @param desc
     * @param location
     * @param bin
     * @param quantityOnHand
     * @param purchasePrice
     * @param salePrice
     * @param msrp
     */
    public InventoryItem(String sku, String upc, String name, String mfr, String color, String size, String desc, String location, String bin, int quantityOnHand, double purchasePrice, double salePrice, double msrp) {
        this.sku = sku;
        this.upc = upc;
        this.name = name;
        this.mfr = mfr;
        this.color = color;
        this.size = size;
        this.desc = desc;
        this.location = location;
        this.bin = bin;
        this.quantityOnHand = quantityOnHand;
        this.purchasePrice = purchasePrice;
        this.salePrice = salePrice;
        this.msrp = msrp;
    }
    /*Methods that are implemented based on the Inventory Abstract*/

    /**
     * Returns a json representation of the object
     * @return
     */
    public String itemToJson() {
        return new Gson().toJson(this);
    }
    /**
     * Saves the item to the datastore.
     * This method probably shouldn't be used often outside of transactional context
     */
    protected void saveItem() {
        ofy().save().entity(this).now();
    }

    /**
     * Setter method for changing quantity.
     * @param i amount by which to change quantity
     */
    protected void changeQuantity(int i) {
        this.quantityOnHand+=i;
    }



}
